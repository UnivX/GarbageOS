#pragma once
#include <stdint.h>
#include "../../hal.h"
#include "x64-memory.h"
#include "../../mem/frame_allocator.h"
#include "../../mem/vmm.h"
#include "gdt.h"
#include "idt.h"
#include "tss.h"

#define LAST_IDT_EXCEPTION 31

#define KERNEL_CODE_SELECTOR 0x10
#define KERNEL_DATA_SELECTOR 0x20
#define USER_CODE_SELECTOR 0x30
#define USER_DATA_SELECTOR 0x40
#define TSS_SELECTORS 0x50
#define DATA_CODE_SELCTOR_NUMBER 4

#define INTERRUPT_NUMBER 256

#define DOUBLE_FAULT_INT_NUMBER 0x8
#define NMI_INT_NUMBER 0x2
#define PAGE_FAULT_INT_NUMBER 0xe

typedef struct LocalCPUState{
	TSS tss;
	VMemHandle exception_stack;//used in nmi and double fault
	VMemHandle page_fault_stack;//used in page fault(if the page fault is generated by a stack overflow we need a new one)
} LocalCPUState;

typedef struct GlobalCPUState{
	GDT* gdt;
	GDTR gdtr;
	IDTEntry* idt;
	IDTR idtr;
	LocalCPUState* local_cpu_states;

	uint32_t number_of_logical_cores;
	uint32_t gdt_entry_count;
	VMemHandle cpu_structures_vmem;
} GlobalCPUState;

void make_CPU_states(uint64_t number_of_logical_cores);
void delete_CPU_states();
void load_CPU_state();
uint16_t get_tss_selector(uint64_t cpu_id);
